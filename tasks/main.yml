---
- name: Ensure public GPG key is added
  become: true
  apt_key:
    keyserver: "{{ rpimonitor_apt_key_server }}"
    id: "{{ rpimonitor_apt_key_id }}"

- name: Ensure APT repository is added
  become: true
  apt_repository:
    repo: "{{ rpimonitor_repo }}"
    filename: rpimonitor

- name: Ensure rpimonitor group service account exists
  become: true
  group:
    name: "{{ rpimonitor_group }}"
    system: yes

- name: Ensure rpimonitor user service account exists
  become: true
  user:
    name: "{{ rpimonitor_user }}"
    create_home: no
    system: yes
    group: "{{ rpimonitor_group }}"

- name: Ensure RPI-Monitor is installed
  become: true
  apt:
    update_cache: yes
    name: rpimonitor
  notify:
    - Update packages status
    - Ensure packages-status APT-Hook

# NOTE: Would be useful if a reverse proxy is used.
# - name: Ensure embedded web server is not started
#   become: true
#   ansible.builtin.lineinfile:
#     path: "{{ rpimonitor_daemon_conf_file }}"
#     regexp: '^daemon.noserver'
#     insertafter: '#daemon.noserver'
#     line: daemon.noserver=1
#   notify: Restart RPi-Monitor

- name: Ensure service group is used
  become: true
  ansible.builtin.lineinfile:
    path: "{{ rpimonitor_daemon_conf_file }}"
    regexp: '^daemon.group'
    insertafter: '#daemon.group'
    line: daemon.group={{ rpimonitor_group }}
  notify: Restart RPi-Monitor  # TODO: Don't know if Ansible collects notifies and runs them once or simply triggers them each time

- name: Ensure service user is used
  become: true
  ansible.builtin.lineinfile:
    path: "{{ rpimonitor_daemon_conf_file }}"
    regexp: '^daemon.user'
    insertafter: '#daemon.user'
    line: daemon.user={{ rpimonitor_user }}
  notify: Restart RPi-Monitor

- name: Ensure port
  become: true
  ansible.builtin.lineinfile:
    path: "{{ rpimonitor_daemon_conf_file }}"
    regexp: '^daemon.port'
    insertafter: '#daemon.port'
    line: daemon.port={{ rpimonitor_port }}
  notify: Restart RPi-Monitor

- name: Ensure bind address
  become: true
  ansible.builtin.lineinfile:
    path: "{{ rpimonitor_daemon_conf_file }}"
    regexp: '^daemon.addr'
    insertafter: '#daemon.addr'
    line: daemon.addr={{ rpimonitor_ip_addr }}
  notify: Restart RPi-Monitor

- name: Ensure wired network monitor
  become: true
  ansible.builtin.template:
    src: templates/network.conf.j2
    dest: /etc/rpimonitor/template/network.conf
    owner: root
    group: root
    mode: u=rw,g=rw,o=r
  notify: Restart RPi-Monitor

- name: Detect if WLAN interface exists
  set_fact: rpimonitor_wlan=true
  when: 
    - '"wlan0" in ansible_interfaces'
  notify: Restart RPi-Monitor

- name: Ensure WLAN monitor
  become: true
  when: rpimonitor_wlan is defined and rpimonitor_wlan == true  # TODO: seems wrong; should be false if no wlan0 was found - not undefined
  ansible.builtin.lineinfile:
    path: /etc/rpimonitor/template/raspbian.conf
    regexp: '^#?include=/etc/rpimonitor/template/wlan.conf$'
    line: 'include=/etc/rpimonitor/template/wlan.conf'
    state: present
  notify: Restart RPi-Monitor